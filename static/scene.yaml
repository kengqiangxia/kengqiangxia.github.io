cameras:
    camera1:
        type: perspective

lights:
    light1:
        type: directional
        direction: [0, 1, -.5]
        diffuse: .3
        ambient: 1

sources:
    mapzen:
        type: TopoJSON
        # url: http://localhost:8080/geoserver/gwc/service/wmts?REQUEST=GetTile&SERVICE=WMTS&VERSION=1.0.0&LAYER=tiger:poly_landmarks&STYLE=&TILEMATRIX=EPSG:900913:{z}&TILEMATRIXSET=EPSG:900913&FORMAT=application/json;type=topojson&TILECOL={x}&TILEROW={y}
        # url: http://localhost:8080/geoserver/gwc/service/wmts?REQUEST=GetTile&SERVICE=WMTS&VERSION=1.0.0&LAYER=tiger:poly_landmarks&STYLE=&TILEMATRIX=EPSG:900913:{z}&TILEMATRIXSET=EPSG:900913&FORMAT=application/json;type=geojson&TILECOL={x}&TILEROW={y}
        url: https://tile.mapzen.com/mapzen/vector/v1/all/{z}/{x}/{y}.topojson
        # url_params:
        #   api_key: mapzen-tDHBHDp
        # url: data.topojson
        max_zoom: 16
        transform: |
            function (data) {
                data.features.forEach(function(feature) {
                    if(feature.geometry.type=="MultiPolygon") {
                        feature.geometry.coordinates.forEach(function(polygon){
                            polygon[0].forEach(function(point,index,array){
                                var x = point[0] / 20037508.34 * 180;
                                var y = point[1] / 20037508.34 * 180;
                                 y= 180/Math.PI*(2*Math.atan(Math.exp(y*Math.PI/180))-Math.PI/2);
                                array[index] = [x,y]
                            })
                        })
                    }
                    if(feature.geometry.type=="Polygon") {
                        feature.geometry.coordinates[0].forEach(function(point,index,array){
                            var x = point[0] / 20037508.34 * 180;
                            var y = point[1] / 20037508.34 * 180;
                             y= 180/Math.PI*(2*Math.atan(Math.exp(y*Math.PI/180))-Math.PI/2);
                            array[index] = [x,y]
                        })
                    }
                    feature.properties.height=1000;
                })
                console.log(data)
                return data;
            }

layers:
    # poly_landmarks:
    #     data: { source: mapzen }
    #     draw:
    #         polygons:
    #             order: 1
    #             color: '#88bbee'
    poly_landmarks:
            data: { source: mapzen }
            draw:
                polygons:
                    order: 1
                    color: |
                        function () {
                            var h = feature.height || 20;
                            h = Math.min((h + 50)/ 255, .8); // max brightness: .8
                            h = Math.max(h, .4); // min brightness: .4
                            return [h, h, h];
                        }
            3d-buildings:
                filter: { $zoom: { min: 15 } }
                draw:
                    polygons:
                        extrude: function () { return feature.height > 20 || $zoom >= 16; }